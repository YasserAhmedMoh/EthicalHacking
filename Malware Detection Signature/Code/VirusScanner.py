#Virus Scanner Program
import sys, re, glob, hashlib, os, subprocess, psutil,  ctypes

#SCAN SIGNATURES
SignaturesSaved = []
SignatureDetail = []
ListOfProcesses = []


####################################### CLASS FOR HARMFUL PROCESS INFORMATION ###########################################
class ProcessM:
    def __init__(self,processName,pid,path):
        self.processName = processName
        self.pid = pid
        self.path = path



#################################### GET SIGNATURES FROM THE DATABASE ##########################################
def GetSignatures():
    
    with open('Hashes.txt') as myDatabase:
        Database = myDatabase.readlines()

        # GET EACH SIGNATURE IN THE DATABASE AND APPEND IT TO THE LIST
        # WE DON'T HAVE TO WORRY HERE ABOUT DUPLICATES 
        # BECAUSE THE DATABASE DOESN'T STORE ANY DUPLICATES
        for line in Database:
            signatures = line[:128]
            SignaturesSaved.append(signatures)
            SignatureDetail.append(line)




#################################### SCAN SPECIFIC DIRECTORY FOR ANY MALWARE ##########################################
def ScanDirectory(path):

    #COUNT NUMBER OF MALWARES IN THE DIRECTORY FOUND
    MalwaresCount = 0

    # GET EVERY PROGRAM IN THE DIRECTORY
    print("SCANNING " + path + " ... \n")
    Allprograms = glob.glob( path + "/*" )

    for program in Allprograms:
        
        # OPEN EACH FILE AND READ BYTES
        file = open( program , "rb")
        fileData = file.read()
        file.close()
        
        # GET HASH OF EACH FILE IN THE GIVEN DIRECTORY
        fileHash = hashlib.sha512(fileData)
        # DIGEST IS MORE READABLE
        hashDigest = fileHash.hexdigest()

        for i in range(len(SignaturesSaved)):

            # IF HASH OF THE FILE MATCHES ANY OF THAT IN THE DATABASE
            # THEN MALWARE HAS BEEN DETECTED
            if (hashDigest== SignaturesSaved[i]):
                # More Malwares
                MalwaresCount +=1
                # FOUND A VIRUS
                # GET ITS PATH AND PRINT OUT ITS DETAILS
                programLocation = os.getcwd() 
                print("VIRUS DETECTED AT " + programLocation + "/" + program)
                print("VIRUS DETAILS :: " + SignatureDetail[i])
                
                # CHECK WHAT USER WOULD LIKE TO DO WITH MALWARE
                print("ENTER R TO REMOVE THE POTENTIAL MALWARE ")
                print("ENTER B TO ALLOW THE POTENTIAL MALWARE ON YOUR DEVICE ")

                # SIMILAR TO A DO WHILE LOOP
                while(True):
                    State = input()

                    if (State == 'R'):
                        os.system('rm ' + program)
                        print("MALWARE HAS BEEN REMOVED SUCCESSFULY \n")
                        break
                    
                    elif (State == 'B'):
                        print("ALLOW MALWARE \n ")
                        break
                    
                    else:
                        print("INVALID INPUT \n")
            
            # END OF NESTED FOR LOOP (SignaturesSaved)
        # END OF FOR LOOP (Allprograms) 

    print("DETECTED THE FOLLOWING NUMBER OF MALWARE :",MalwaresCount, "ON THE FOLLOWING PATH \" " + path + " \" ")
    #END OF ScanDirectory(path)




#################################### SCAN ALL PROCCESSESS RUNNING ###############################################
def ScanAllProccesses():
    MalwaresCount = 0

    # PSUTIL MAKES THE CODE PLATFORM INDEPENDANT
    # Iterate over all running process
    for process in psutil.process_iter():
        try:
            # Get process name & pid from process object.
            processName = process.name()
            pid = process.pid
            processPath = process.exe()
            # print details of all the processes
            print("Name :",processName, ", PID:", pid , ", Path: ", processPath)
            
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    
        try:
            # OPEN EXECUTABLE AND GET ITS DATA
            file = open( processPath , "rb")
            fileData = file.read()
            file.close()
            
            # GET HASH OF EXECUTABLE
            fileHash = hashlib.sha512(fileData)
            hashDigest = fileHash.hexdigest()

            # COMPARE WITH OUR SIGNATURE DATABASE
            for i in range(len(SignaturesSaved)):

                # IF HASH OF THE FILE MATCHES ANY OF THAT IN THE DATABASE
                # THEN MALWARE HAS BEEN DETECTED
                if (hashDigest== SignaturesSaved[i]):
                    
                    # Add all the details to the ListOfProcesses
                    ListOfProcesses.append(ProcessM(processName, pid, processPath))
                    # HARMFUL PROCESSES INCREASES 
                    MalwaresCount +=1

                    # FOUND A VIRUS
                    print("VIRUS DETECTED AT " + processPath)
                    print("VIRUS DETAILS :: " + SignatureDetail[i])
                    
                    # CHECK WHAT USER WOULD LIKE TO DO WITH MALWARE
                    print("ENTER K TO KILL THE HARMFUL PROCESS ")
                    print("ENTER B TO ALLOW THE PROCESS TO KEEP RUNNING ")

                    # SIMILAR TO A 'DO WHILE' LOOP
                    while(True):
                        State = input()

                        if (State == 'K'):
                            # KILL THE PROCESS
                            p = psutil.Process(pid)
                            p.terminate()
                            # REMOVE PROCESS FROM COMPUTER
                            #os.system('rm ' + processPath)
                            print("POTENTIAL HARMFUL PROCESS HAS BEEN KILLED SUCCESSFULY \n")
                            break
                        
                        elif (State == 'B'):
                            print("ALLOW PROCESS \n")
                            break
                        
                        else:
                            print("INVALID INPUT \n")
                
                # END OF NESTED FOR LOOP (SignaturesSaved)
            # END OF FOR LOOP (Allprograms) 
        except:
            pass

    print("DETECTED THE FOLLOWING NUMBER OF MALWARE :",MalwaresCount)

    for process in ListOfProcesses:
        print(" POTENTIAL HARMFUL PROCESS " + process.processName, \
        process.pid, " -->", process.path)
                        

    

####################################    MAIN     ###############################################
if __name__ == "__main__":
    
    # USER MUST BE ADMIN TO USE THIS FILE
    try:
        is_admin = os.getuid() == 0
    except AttributeError:
        is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0

    if not is_admin:
        print("NO PERMISSION")    
        exit()
    
    
    GetSignatures()
    
    while(True):
        print("1 : SCAN DIRECTORY , 2 : SCAN ALL PROCESSES")
        userChoice = input()

        if (userChoice == '1'):
            print("1 : Scan \"LocalDisk/VirusTest\"  \
                   2 : Scan \"LocalDisk/MalTest\" ")
        
            scanDir = input()
            if(scanDir == '1'):
                ScanDirectory("LocalDisk/VirusTest")
            elif(scanDir == '2'):
                ScanDirectory("LocalDisk/MalTest")
            break
        
        elif (userChoice == '2'):
            ScanAllProccesses()
            break

        else:
            print("INVALID INPUT, TRY AGAIN \n")
